#!/usr/bin/env python3
\"\"\"\nQuick database table checker\n\"\"\"\n\nimport asyncio\nimport sys\nimport os\n\n# Add project root to path\nsys.path.insert(0, '/app/api')\n\nasync def check_database_tables():\n    \"\"\"Check if batch_jobs table exists and is accessible\"\"\"\n    try:\n        from app.core.database import async_session_factory, get_fresh_db_session\n        from sqlalchemy import text\n        \n        print(\"üîç Checking database table access...\")\n        \n        # Strategy 1: Try session factory\n        if async_session_factory:\n            try:\n                async with async_session_factory() as db:\n                    # Check if batch_jobs table exists\n                    result = await db.execute(text(\"\"\"\n                        SELECT table_name \n                        FROM information_schema.tables \n                        WHERE table_schema = 'public' \n                        AND table_name = 'batch_jobs'\n                    \"\"\"))\n                    table_exists = result.fetchone() is not None\n                    \n                    print(f\"üìä batch_jobs table exists: {table_exists}\")\n                    \n                    if table_exists:\n                        # Try to count rows\n                        result = await db.execute(text(\"SELECT COUNT(*) FROM batch_jobs\"))\n                        count = result.fetchone()[0]\n                        print(f\"üìà batch_jobs count: {count}\")\n                        return True\n                    else:\n                        print(\"‚ùå batch_jobs table does not exist!\")\n                        return False\n                        \n            except Exception as e:\n                print(f\"‚ùå Session factory failed: {e}\")\n        \n        # Strategy 2: Try fresh session\n        try:\n            async for db in get_fresh_db_session():\n                # Check if batch_jobs table exists\n                result = await db.execute(text(\"\"\"\n                    SELECT table_name \n                    FROM information_schema.tables \n                    WHERE table_schema = 'public' \n                    AND table_name = 'batch_jobs'\n                \"\"\"))\n                table_exists = result.fetchone() is not None\n                \n                print(f\"üìä batch_jobs table exists (fresh): {table_exists}\")\n                \n                if table_exists:\n                    # Try to count rows\n                    result = await db.execute(text(\"SELECT COUNT(*) FROM batch_jobs\"))\n                    count = result.fetchone()[0]\n                    print(f\"üìà batch_jobs count (fresh): {count}\")\n                    return True\n                else:\n                    print(\"‚ùå batch_jobs table does not exist (fresh)!\")\n                    return False\n                break\n                \n        except Exception as e:\n            print(f\"‚ùå Fresh session also failed: {e}\")\n            return False\n            \n    except Exception as e:\n        print(f\"üí• Database check failed: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    success = asyncio.run(check_database_tables())\n    print(f\"\\nüèÅ Result: {'‚úÖ SUCCESS' if success else '‚ùå FAILED'}\")\n