"use strict";exports.id=298,exports.ids=[298],exports.modules={4298:(e,t,a)=>{a.d(t,{A:()=>o,apiService:()=>r});let i=()=>"http://localhost:8000",s=e=>{let t=i();return`${t}${e}`};class n extends Error{constructor(e,t,a){super(e),this.status=t,this.response=a,this.name="ApiError"}}async function c(e){if(console.log(`🌐 API Response: ${e.status} ${e.url}`),!e.ok){let t=`HTTP ${e.status}: ${e.statusText}`;try{let a=await e.json();t=a.error||a.message||t}catch{}throw console.error(`❌ API Error: ${t} (${e.url})`),new n(t,e.status)}try{let t=await e.json();return console.log(`✅ API Success: ${e.url}`),t}catch{return console.log(`⚠️ API No JSON: ${e.url}`),{}}}let r={getConfig:async e=>c(await fetch(s(`/api/v1/config/${e}`))),updateConfig:async(e,t)=>c(await fetch(s(`/api/v1/config/${e}`),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),getConfigFiles:async()=>c(await fetch(s("/api/v1/config/files"))),testJellyfinConnection:async e=>c(await fetch(s("/api/v1/config/test-jellyfin"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),testConnection:async(e,t)=>c(await fetch(s(`/api/v1/config/test-${e}`),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),getSystemStatus:async()=>c(await fetch(s("/health/detailed"))),getSystemInfo:async()=>c(await fetch(s("/api/v1/system/info"))),getSystemConfig:async()=>c(await fetch(s("/api/v1/config/system"))),getPreviewBadgeTypes:async()=>c(await fetch(s("/api/v1/preview/badge-types"))),generatePreview:async e=>c(await fetch(s("/api/v1/preview/generate"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),getPreviewLibraries:async()=>c(await fetch(s("/api/v1/preview/libraries"))),async getPreviewMedia(e){let t=new URLSearchParams;e?.library_id&&t.set("library_id",e.library_id),e?.search&&t.set("search",e.search),e?.page&&t.set("page",e.page.toString()),e?.limit&&t.set("limit",e.limit.toString());let a=s(`/api/v1/preview/media${t.toString()?"?"+t.toString():""}`);return c(await fetch(a))},async getMedia(e){let t=new URLSearchParams;e?.page&&t.set("page",e.page.toString()),e?.per_page&&t.set("per_page",e.per_page.toString()),e?.search&&t.set("search",e.search),e?.media_type&&t.set("media_type",e.media_type);let a=s(`/api/v1/media${t.toString()?"?"+t.toString():""}`);return c(await fetch(a))},getMediaItem:async e=>c(await fetch(s(`/api/v1/media/${e}`))),scanLibrary:async()=>c(await fetch(s("/api/v1/media/scan"),{method:"POST"})),async getJobs(e){let t=new URLSearchParams;e?.user_id&&t.set("user_id",e.user_id);let a=s(`/api/v1/workflow/jobs/${t.toString()?"?"+t.toString():""}`);return c(await fetch(a))},createJob:async e=>c(await fetch(s("/api/v1/jobs"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),getJob:async e=>c(await fetch(s(`/api/v1/workflow/jobs/${e}`))),async getSchedules(e){let t=new URLSearchParams;e?.skip&&t.set("skip",e.skip.toString()),e?.limit&&t.set("limit",e.limit.toString());let a=s(`/api/v1/schedules${t.toString()?"?"+t.toString():""}`);return c(await fetch(a))},createSchedule:async e=>c(await fetch(s("/api/v1/schedules"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),updateSchedule:async(e,t)=>c(await fetch(s(`/api/v1/schedules/${e}`),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),deleteSchedule:async e=>c(await fetch(s(`/api/v1/schedules/${e}`),{method:"DELETE"})),async getScheduleHistory(e){let t=new URLSearchParams;e?.skip&&t.set("skip",e.skip.toString()),e?.limit&&t.set("limit",e.limit.toString()),e?.schedule_id&&t.set("schedule_id",e.schedule_id),e?.status&&t.set("status",e.status);let a=s(`/api/v1/schedules/executions/history${t.toString()?"?"+t.toString():""}`);return c(await fetch(a))},executeSchedule:async e=>c(await fetch(s(`/api/v1/schedules/${e}/execute`),{method:"POST"})),getScheduleBadgeTypes:async()=>c(await fetch(s("/api/v1/schedules/config/badge-types"))),getScheduleCronPresets:async()=>c(await fetch(s("/api/v1/schedules/config/cron-presets"))),getScheduleLibraries:async()=>c(await fetch(s("/api/v1/schedules/config/libraries"))),getAnalyticsOverview:async()=>c(await fetch(s("/api/v1/analytics/overview"))),getJobStatusDistribution:async()=>c(await fetch(s("/api/v1/analytics/jobs/status-distribution"))),getProcessingTrends:async(e=30)=>c(await fetch(s(`/api/v1/analytics/jobs/trends?days=${e}`))),getJobTypeDistribution:async()=>c(await fetch(s("/api/v1/analytics/jobs/types"))),getScheduleAnalytics:async()=>c(await fetch(s("/api/v1/analytics/schedules"))),getSystemPerformance:async()=>c(await fetch(s("/api/v1/analytics/performance")))},o=r}};