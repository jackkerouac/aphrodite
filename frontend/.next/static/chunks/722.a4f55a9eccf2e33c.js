"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[722],{722:(e,t,a)=>{a.d(t,{A:()=>r,apiService:()=>o});let i=()=>window.location.origin,s=e=>{let t=i();return"".concat(t).concat(e)};class c extends Error{constructor(e,t,a){super(e),this.status=t,this.response=a,this.name="ApiError"}}async function n(e){if(console.log("\uD83C\uDF10 API Response: ".concat(e.status," ").concat(e.url)),!e.ok){let t="HTTP ".concat(e.status,": ").concat(e.statusText);try{let a=await e.json();t=a.error||a.message||t}catch(e){}throw console.error("❌ API Error: ".concat(t," (").concat(e.url,")")),new c(t,e.status)}try{let t=await e.json();return console.log("✅ API Success: ".concat(e.url)),t}catch(t){return console.log("⚠️ API No JSON: ".concat(e.url)),{}}}let o={getConfig:async e=>n(await fetch(s("/api/v1/config/".concat(e)))),updateConfig:async(e,t)=>n(await fetch(s("/api/v1/config/".concat(e)),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),getConfigFiles:async()=>n(await fetch(s("/api/v1/config/files"))),testJellyfinConnection:async e=>n(await fetch(s("/api/v1/config/test-jellyfin"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),testConnection:async(e,t)=>n(await fetch(s("/api/v1/config/test-".concat(e)),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),getSystemStatus:async()=>n(await fetch(s("/health/detailed"))),getSystemInfo:async()=>n(await fetch(s("/api/v1/system/info"))),getSystemConfig:async()=>n(await fetch(s("/api/v1/config/system"))),getPreviewBadgeTypes:async()=>n(await fetch(s("/api/v1/preview/badge-types"))),generatePreview:async e=>n(await fetch(s("/api/v1/preview/generate"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),getPreviewLibraries:async()=>n(await fetch(s("/api/v1/preview/libraries"))),async getPreviewMedia(e){let t=new URLSearchParams;(null==e?void 0:e.library_id)&&t.set("library_id",e.library_id),(null==e?void 0:e.search)&&t.set("search",e.search),(null==e?void 0:e.page)&&t.set("page",e.page.toString()),(null==e?void 0:e.limit)&&t.set("limit",e.limit.toString());let a=s("/api/v1/preview/media".concat(t.toString()?"?"+t.toString():""));return n(await fetch(a))},async getMedia(e){let t=new URLSearchParams;(null==e?void 0:e.page)&&t.set("page",e.page.toString()),(null==e?void 0:e.per_page)&&t.set("per_page",e.per_page.toString()),(null==e?void 0:e.search)&&t.set("search",e.search),(null==e?void 0:e.media_type)&&t.set("media_type",e.media_type);let a=s("/api/v1/media".concat(t.toString()?"?"+t.toString():""));return n(await fetch(a))},getMediaItem:async e=>n(await fetch(s("/api/v1/media/".concat(e)))),scanLibrary:async()=>n(await fetch(s("/api/v1/media/scan"),{method:"POST"})),async getJobs(e){let t=new URLSearchParams;(null==e?void 0:e.user_id)&&t.set("user_id",e.user_id);let a=s("/api/v1/workflow/jobs/".concat(t.toString()?"?"+t.toString():""));return n(await fetch(a))},createJob:async e=>n(await fetch(s("/api/v1/jobs"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),getJob:async e=>n(await fetch(s("/api/v1/workflow/jobs/".concat(e)))),async getSchedules(e){let t=new URLSearchParams;(null==e?void 0:e.skip)&&t.set("skip",e.skip.toString()),(null==e?void 0:e.limit)&&t.set("limit",e.limit.toString());let a=s("/api/v1/schedules".concat(t.toString()?"?"+t.toString():""));return n(await fetch(a))},createSchedule:async e=>n(await fetch(s("/api/v1/schedules"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),updateSchedule:async(e,t)=>n(await fetch(s("/api/v1/schedules/".concat(e)),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),deleteSchedule:async e=>n(await fetch(s("/api/v1/schedules/".concat(e)),{method:"DELETE"})),async getScheduleHistory(e){let t=new URLSearchParams;(null==e?void 0:e.skip)&&t.set("skip",e.skip.toString()),(null==e?void 0:e.limit)&&t.set("limit",e.limit.toString()),(null==e?void 0:e.schedule_id)&&t.set("schedule_id",e.schedule_id),(null==e?void 0:e.status)&&t.set("status",e.status);let a=s("/api/v1/schedules/executions/history".concat(t.toString()?"?"+t.toString():""));return n(await fetch(a))},getScheduleExecution:async(e,t)=>n(await fetch(s("/api/v1/schedules/".concat(e,"/executions/").concat(t)))),executeSchedule:async e=>n(await fetch(s("/api/v1/schedules/".concat(e,"/execute")),{method:"POST"})),getScheduleBadgeTypes:async()=>n(await fetch(s("/api/v1/schedules/config/badge-types"))),getScheduleCronPresets:async()=>n(await fetch(s("/api/v1/schedules/config/cron-presets"))),getScheduleLibraries:async()=>n(await fetch(s("/api/v1/schedules/config/libraries"))),async clearScheduleHistory(e){let t=e?s("/api/v1/schedules/executions/history?schedule_id=".concat(e)):s("/api/v1/schedules/executions/history");return n(await fetch(t,{method:"DELETE"}))},getAnalyticsOverview:async()=>n(await fetch(s("/api/v1/analytics/overview"))),getJobStatusDistribution:async()=>n(await fetch(s("/api/v1/analytics/jobs/status-distribution"))),async getProcessingTrends(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30;return n(await fetch(s("/api/v1/analytics/jobs/trends?days=".concat(e))))},getJobTypeDistribution:async()=>n(await fetch(s("/api/v1/analytics/jobs/types"))),getScheduleAnalytics:async()=>n(await fetch(s("/api/v1/analytics/schedules"))),getSystemPerformance:async()=>n(await fetch(s("/api/v1/analytics/performance")))},r=o}}]);