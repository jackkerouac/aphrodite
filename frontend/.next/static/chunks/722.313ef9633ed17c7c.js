"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[722],{722:(t,e,a)=>{a.d(e,{A:()=>o,apiService:()=>s});let c="http://localhost:8000";class i extends Error{constructor(t,e,a){super(t),this.status=e,this.response=a,this.name="ApiError"}}async function n(t){if(console.log("\uD83C\uDF10 API Response: ".concat(t.status," ").concat(t.url)),!t.ok){let e="HTTP ".concat(t.status,": ").concat(t.statusText);try{let a=await t.json();e=a.error||a.message||e}catch(t){}throw console.error("❌ API Error: ".concat(e," (").concat(t.url,")")),new i(e,t.status)}try{let e=await t.json();return console.log("✅ API Success: ".concat(t.url)),e}catch(e){return console.log("⚠️ API No JSON: ".concat(t.url)),{}}}let s={getConfig:async t=>n(await fetch("".concat(c,"/api/v1/config/").concat(t))),updateConfig:async(t,e)=>n(await fetch("".concat(c,"/api/v1/config/").concat(t),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),getConfigFiles:async()=>n(await fetch("".concat(c,"/api/v1/config/files"))),testJellyfinConnection:async t=>n(await fetch("".concat(c,"/api/v1/config/test-jellyfin"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),testConnection:async(t,e)=>n(await fetch("".concat(c,"/api/v1/config/test-").concat(t),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),getSystemStatus:async()=>n(await fetch("".concat(c,"/health/detailed"))),getSystemInfo:async()=>n(await fetch("".concat(c,"/api/v1/system/info"))),getSystemConfig:async()=>n(await fetch("".concat(c,"/api/v1/config/system"))),getPreviewBadgeTypes:async()=>n(await fetch("".concat(c,"/api/v1/preview/badge-types"))),generatePreview:async t=>n(await fetch("".concat(c,"/api/v1/preview/generate"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),getPreviewLibraries:async()=>n(await fetch("".concat(c,"/api/v1/preview/libraries"))),async getPreviewMedia(t){let e=new URLSearchParams;(null==t?void 0:t.library_id)&&e.set("library_id",t.library_id),(null==t?void 0:t.search)&&e.set("search",t.search),(null==t?void 0:t.page)&&e.set("page",t.page.toString()),(null==t?void 0:t.limit)&&e.set("limit",t.limit.toString());let a="".concat(c,"/api/v1/preview/media").concat(e.toString()?"?"+e.toString():"");return n(await fetch(a))},async getMedia(t){let e=new URLSearchParams;(null==t?void 0:t.page)&&e.set("page",t.page.toString()),(null==t?void 0:t.per_page)&&e.set("per_page",t.per_page.toString()),(null==t?void 0:t.search)&&e.set("search",t.search),(null==t?void 0:t.media_type)&&e.set("media_type",t.media_type);let a="".concat(c,"/api/v1/media").concat(e.toString()?"?"+e.toString():"");return n(await fetch(a))},getMediaItem:async t=>n(await fetch("".concat(c,"/api/v1/media/").concat(t))),scanLibrary:async()=>n(await fetch("".concat(c,"/api/v1/media/scan"),{method:"POST"})),async getJobs(t){let e=new URLSearchParams;(null==t?void 0:t.user_id)&&e.set("user_id",t.user_id);let a="".concat(c,"/api/v1/workflow/jobs/").concat(e.toString()?"?"+e.toString():"");return n(await fetch(a))},createJob:async t=>n(await fetch("".concat(c,"/api/v1/jobs"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),getJob:async t=>n(await fetch("".concat(c,"/api/v1/workflow/jobs/").concat(t))),async getSchedules(t){let e=new URLSearchParams;(null==t?void 0:t.skip)&&e.set("skip",t.skip.toString()),(null==t?void 0:t.limit)&&e.set("limit",t.limit.toString());let a="".concat(c,"/api/v1/schedules").concat(e.toString()?"?"+e.toString():"");return n(await fetch(a))},createSchedule:async t=>n(await fetch("".concat(c,"/api/v1/schedules"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})),updateSchedule:async(t,e)=>n(await fetch("".concat(c,"/api/v1/schedules/").concat(t),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})),deleteSchedule:async t=>n(await fetch("".concat(c,"/api/v1/schedules/").concat(t),{method:"DELETE"})),async getScheduleHistory(t){let e=new URLSearchParams;(null==t?void 0:t.skip)&&e.set("skip",t.skip.toString()),(null==t?void 0:t.limit)&&e.set("limit",t.limit.toString()),(null==t?void 0:t.schedule_id)&&e.set("schedule_id",t.schedule_id),(null==t?void 0:t.status)&&e.set("status",t.status);let a="".concat(c,"/api/v1/schedules/executions/history").concat(e.toString()?"?"+e.toString():"");return n(await fetch(a))},executeSchedule:async t=>n(await fetch("".concat(c,"/api/v1/schedules/").concat(t,"/execute"),{method:"POST"})),getScheduleBadgeTypes:async()=>n(await fetch("".concat(c,"/api/v1/schedules/config/badge-types"))),getScheduleCronPresets:async()=>n(await fetch("".concat(c,"/api/v1/schedules/config/cron-presets"))),getScheduleLibraries:async()=>n(await fetch("".concat(c,"/api/v1/schedules/config/libraries"))),getAnalyticsOverview:async()=>n(await fetch("".concat(c,"/api/v1/analytics/overview"))),getJobStatusDistribution:async()=>n(await fetch("".concat(c,"/api/v1/analytics/jobs/status-distribution"))),async getProcessingTrends(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:30;return n(await fetch("".concat(c,"/api/v1/analytics/jobs/trends?days=").concat(t)))},getJobTypeDistribution:async()=>n(await fetch("".concat(c,"/api/v1/analytics/jobs/types"))),getScheduleAnalytics:async()=>n(await fetch("".concat(c,"/api/v1/analytics/schedules"))),getSystemPerformance:async()=>n(await fetch("".concat(c,"/api/v1/analytics/performance")))},o=s}}]);