# Aphrodite v4.0.0 Production Docker Compose
# Complete frontend + backend deployment with clean database

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5433}:5432"  # External port configurable, internal still 5432
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aphrodite}
      POSTGRES_USER: ${POSTGRES_USER:-aphrodite}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aphrodite}"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Redis Cache (optional but recommended)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"  # External port configurable
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Aphrodite - Complete Application (Frontend + API)
  aphrodite:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://aphrodite:${POSTGRES_PASSWORD:-changeme}@postgres:5432/aphrodite}
      
      # Redis Configuration
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      
      # Application Configuration
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      SECRET_KEY: ${SECRET_KEY:-please-change-this-secret-key-in-production}
      
      # Allow all hosts for local network access
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-*}
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DEBUG: ${DEBUG:-false}
      
      # Background Jobs
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      ENABLE_BACKGROUND_JOBS: ${ENABLE_BACKGROUND_JOBS:-true}
      
      # Jellyfin Integration (configure via web interface)
      JELLYFIN_URL: ${JELLYFIN_URL:-}
      JELLYFIN_API_KEY: ${JELLYFIN_API_KEY:-}
      JELLYFIN_USER_ID: ${JELLYFIN_USER_ID:-}
    ports:
      - "${APHRODITE_PORT:-8000}:8000"
    volumes:
      # Persistent application data
      - aphrodite_data:/app/data
      - aphrodite_logs:/app/logs
      - aphrodite_media:/app/media
      # Local posters directory for testing
      - ./api/static/originals:/app/api/static/originals
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Celery Worker - Always runs alongside main app
  aphrodite-worker:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: ["python", "-m", "celery", "-A", "celery_app", "worker", "--loglevel=info", "--pool=solo", "--concurrency=1"]
    environment:
      # Same environment as main application
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://aphrodite:${POSTGRES_PASSWORD:-changeme}@postgres:5432/aphrodite}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      CELERY_BROKER_URL: ${CELERY_BROKER_URL:-redis://redis:6379/0}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND:-redis://redis:6379/1}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      SECRET_KEY: ${SECRET_KEY:-please-change-this-secret-key-in-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      PYTHONPATH: /app
    volumes:
      # Share volumes with main application
      - aphrodite_data:/app/data
      - aphrodite_logs:/app/logs
      - aphrodite_media:/app/media
      - ./api/static/originals:/app/api/static/originals
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    working_dir: /app/api
    healthcheck:
      test: ["CMD", "python", "-c", "from celery_app import celery_app; print('Worker healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  aphrodite_data:
    driver: local
  aphrodite_logs:
    driver: local
  aphrodite_media:
    driver: local

networks:
  default:
    name: aphrodite_network
