#!/usr/bin/env python3\n\"\"\"\nSchedules API Test Script\n\nThis script tests the schedules API endpoints to ensure they are working correctly.\n\"\"\"\n\nimport asyncio\nimport aiohttp\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\n\n# Test configuration\nAPI_BASE_URL = \"http://localhost:8000\"\nTEST_SCHEDULE_NAME = \"Test Schedule API\"\n\n\nasync def test_schedules_api():\n    \"\"\"Test all schedules API endpoints\"\"\"\n    \n    async with aiohttp.ClientSession() as session:\n        print(\"üß™ Testing Schedules API endpoints...\\n\")\n        \n        # Test 1: Get badge types configuration\n        print(\"1. Testing badge types configuration...\")\n        try:\n            async with session.get(f\"{API_BASE_URL}/api/v1/schedules/config/badge-types\") as response:\n                if response.status == 200:\n                    data = await response.json()\n                    print(f\"   ‚úÖ Badge types: {data.get('badge_types', [])}\")\n                else:\n                    print(f\"   ‚ùå Failed: HTTP {response.status}\")\n        except Exception as e:\n            print(f\"   ‚ùå Error: {e}\")\n        \n        # Test 2: Get cron presets\n        print(\"\\n2. Testing cron presets...\")\n        try:\n            async with session.get(f\"{API_BASE_URL}/api/v1/schedules/config/cron-presets\") as response:\n                if response.status == 200:\n                    data = await response.json()\n                    presets = data.get('presets', {})\n                    print(f\"   ‚úÖ Found {len(presets)} cron presets\")\n                    for name, cron in list(presets.items())[:3]:\n                        print(f\"   - {name}: {cron}\")\n                else:\n                    print(f\"   ‚ùå Failed: HTTP {response.status}\")\n        except Exception as e:\n            print(f\"   ‚ùå Error: {e}\")\n        \n        # Test 3: Get libraries (may fail if Jellyfin not configured)\n        print(\"\\n3. Testing libraries configuration...\")\n        try:\n            async with session.get(f\"{API_BASE_URL}/api/v1/schedules/config/libraries\") as response:\n                if response.status == 200:\n                    data = await response.json()\n                    libraries = data.get('libraries', [])\n                    print(f\"   ‚úÖ Found {len(libraries)} libraries\")\n                    for lib in libraries[:3]:\n                        print(f\"   - {lib['name']} ({lib['type']})\")\n                else:\n                    print(f\"   ‚ö†Ô∏è  Libraries endpoint failed: HTTP {response.status}\")\n                    print(\"   (This is expected if Jellyfin is not configured)\")\n        except Exception as e:\n            print(f\"   ‚ö†Ô∏è  Libraries error: {e}\")\n            print(\"   (This is expected if Jellyfin is not configured)\")\n        \n        # Test 4: Get all schedules (should be empty initially)\n        print(\"\\n4. Testing get schedules...\")\n        try:\n            async with session.get(f\"{API_BASE_URL}/api/v1/schedules\") as response:\n                if response.status == 200:\n                    schedules = await response.json()\n                    print(f\"   ‚úÖ Found {len(schedules)} existing schedules\")\n                else:\n                    print(f\"   ‚ùå Failed: HTTP {response.status}\")\n        except Exception as e:\n            print(f\"   ‚ùå Error: {e}\")\n        \n        # Test 5: Create a new schedule\n        print(\"\\n5. Testing create schedule...\")\n        test_schedule = {\n            \"name\": TEST_SCHEDULE_NAME,\n            \"timezone\": \"UTC\",\n            \"cron_expression\": \"0 2 * * *\",\n            \"badge_types\": [\"resolution\", \"audio\"],\n            \"reprocess_all\": False,\n            \"enabled\": True,\n            \"target_libraries\": []\n        }\n        \n        created_schedule_id = None\n        try:\n            async with session.post(\n                f\"{API_BASE_URL}/api/v1/schedules\",\n                json=test_schedule,\n                headers={\"Content-Type\": \"application/json\"}\n            ) as response:\n                if response.status == 200:\n                    created_schedule = await response.json()\n                    created_schedule_id = created_schedule[\"id\"]\n                    print(f\"   ‚úÖ Created schedule: {created_schedule['name']} (ID: {created_schedule_id[:8]}...)\")\n                else:\n                    print(f\"   ‚ùå Failed: HTTP {response.status}\")\n                    error_text = await response.text()\n                    print(f\"   Error: {error_text}\")\n        except Exception as e:\n            print(f\"   ‚ùå Error: {e}\")\n        \n        # Test 6: Get the created schedule\n        if created_schedule_id:\n            print(\"\\n6. Testing get specific schedule...\")\n            try:\n                async with session.get(f\"{API_BASE_URL}/api/v1/schedules/{created_schedule_id}\") as response:\n                    if response.status == 200:\n                        schedule = await response.json()\n                        print(f\"   ‚úÖ Retrieved schedule: {schedule['name']}\")\n                        print(f\"   - Cron: {schedule['cron_expression']}\")\n                        print(f\"   - Badge types: {schedule['badge_types']}\")\n                        print(f\"   - Enabled: {schedule['enabled']}\")\n                    else:\n                        print(f\"   ‚ùå Failed: HTTP {response.status}\")\n            except Exception as e:\n                print(f\"   ‚ùå Error: {e}\")\n        \n        # Test 7: Update the schedule\n        if created_schedule_id:\n            print(\"\\n7. Testing update schedule...\")\n            update_data = {\n                \"name\": f\"{TEST_SCHEDULE_NAME} (Updated)\",\n                \"enabled\": False\n            }\n            try:\n                async with session.put(\n                    f\"{API_BASE_URL}/api/v1/schedules/{created_schedule_id}\",\n                    json=update_data,\n                    headers={\"Content-Type\": \"application/json\"}\n                ) as response:\n                    if response.status == 200:\n                        updated_schedule = await response.json()\n                        print(f\"   ‚úÖ Updated schedule: {updated_schedule['name']}\")\n                        print(f\"   - Enabled: {updated_schedule['enabled']}\")\n                    else:\n                        print(f\"   ‚ùå Failed: HTTP {response.status}\")\n            except Exception as e:\n                print(f\"   ‚ùå Error: {e}\")\n        \n        # Test 8: Get schedule history\n        print(\"\\n8. Testing schedule history...\")\n        try:\n            async with session.get(f\"{API_BASE_URL}/api/v1/schedules/executions/history\") as response:\n                if response.status == 200:\n                    history = await response.json()\n                    print(f\"   ‚úÖ Found {len(history)} execution records\")\n                else:\n                    print(f\"   ‚ùå Failed: HTTP {response.status}\")\n        except Exception as e:\n            print(f\"   ‚ùå Error: {e}\")\n        \n        # Test 9: Execute schedule (if created)\n        if created_schedule_id:\n            print(\"\\n9. Testing manual schedule execution...\")\n            try:\n                async with session.post(f\"{API_BASE_URL}/api/v1/schedules/{created_schedule_id}/execute\") as response:\n                    if response.status == 200:\n                        result = await response.json()\n                        print(f\"   ‚úÖ Schedule execution queued: {result.get('execution_id', 'N/A')[:8]}...\")\n                    else:\n                        print(f\"   ‚ùå Failed: HTTP {response.status}\")\n            except Exception as e:\n                print(f\"   ‚ùå Error: {e}\")\n        \n        # Test 10: Clean up - Delete the test schedule\n        if created_schedule_id:\n            print(\"\\n10. Testing delete schedule...\")\n            try:\n                async with session.delete(f\"{API_BASE_URL}/api/v1/schedules/{created_schedule_id}\") as response:\n                    if response.status == 200:\n                        result = await response.json()\n                        print(f\"   ‚úÖ Deleted test schedule: {result.get('message', 'Success')}\")\n                    else:\n                        print(f\"   ‚ùå Failed: HTTP {response.status}\")\n            except Exception as e:\n                print(f\"   ‚ùå Error: {e}\")\n        \n        print(\"\\nüèÅ Schedules API testing completed!\")\n\n\nif __name__ == \"__main__\":\n    try:\n        asyncio.run(test_schedules_api())\n        print(\"\\n‚úÖ All tests completed!\")\n    except Exception as e:\n        print(f\"\\n‚ùå Test suite failed: {e}\")\n