#!/usr/bin/env python3\n\"\"\"\nSchedules Database Migration Script\n\nThis script creates the necessary database tables for the schedules feature.\nRun this script to set up the schedules tables in your PostgreSQL database.\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# Add project root to Python path\nproject_root = Path(__file__).parent.parent\nsys.path.insert(0, str(project_root))\n\nimport asyncio\nimport asyncpg\nfrom app.core.config import get_settings\nfrom aphrodite_logging import get_logger, setup_logging\n\n# Initialize logging\nsetup_logging(\"development\")\nlogger = get_logger(\"aphrodite.migration.schedules\", service=\"migration\")\n\n\nasync def create_schedules_tables():\n    \"\"\"Create schedules tables in the database\"\"\"\n    settings = get_settings()\n    \n    try:\n        # Connect to database\n        conn = await asyncpg.connect(\n            host=settings.db_host,\n            port=settings.db_port,\n            user=settings.db_user,\n            password=settings.db_password,\n            database=settings.db_name\n        )\n        \n        logger.info(\"Connected to database, creating schedules tables...\")\n        \n        # Create schedules table\n        await conn.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS schedules (\n                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n                name VARCHAR(255) NOT NULL,\n                timezone VARCHAR(100) NOT NULL DEFAULT 'UTC',\n                cron_expression VARCHAR(100) NOT NULL,\n                badge_types TEXT[] NOT NULL DEFAULT '{}',\n                reprocess_all BOOLEAN NOT NULL DEFAULT false,\n                enabled BOOLEAN NOT NULL DEFAULT true,\n                target_libraries TEXT[] NOT NULL DEFAULT '{}',\n                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n                updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n            );\n        \"\"\")\n        \n        # Create schedule_executions table\n        await conn.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS schedule_executions (\n                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n                schedule_id UUID NOT NULL,\n                status VARCHAR(50) NOT NULL,\n                started_at TIMESTAMP WITH TIME ZONE,\n                completed_at TIMESTAMP WITH TIME ZONE,\n                error_message TEXT,\n                items_processed TEXT,\n                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n            );\n        \"\"\")\n        \n        # Create indexes for better performance\n        await conn.execute(\"\"\"\n            CREATE INDEX IF NOT EXISTS idx_schedules_enabled \n            ON schedules (enabled);\n        \"\"\")\n        \n        await conn.execute(\"\"\"\n            CREATE INDEX IF NOT EXISTS idx_schedule_executions_schedule_id \n            ON schedule_executions (schedule_id);\n        \"\"\")\n        \n        await conn.execute(\"\"\"\n            CREATE INDEX IF NOT EXISTS idx_schedule_executions_status \n            ON schedule_executions (status);\n        \"\"\")\n        \n        await conn.execute(\"\"\"\n            CREATE INDEX IF NOT EXISTS idx_schedule_executions_created_at \n            ON schedule_executions (created_at DESC);\n        \"\"\")\n        \n        logger.info(\"Successfully created schedules tables and indexes\")\n        \n        # Verify tables exist\n        tables = await conn.fetch(\"\"\"\n            SELECT table_name FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_name IN ('schedules', 'schedule_executions');\n        \"\"\")\n        \n        table_names = [row['table_name'] for row in tables]\n        logger.info(f\"Verified tables exist: {table_names}\")\n        \n        await conn.close()\n        logger.info(\"Database migration completed successfully\")\n        \n    except Exception as e:\n        logger.error(f\"Failed to create schedules tables: {e}\")\n        raise\n\n\nif __name__ == \"__main__\":\n    try:\n        asyncio.run(create_schedules_tables())\n        print(\"✅ Schedules database migration completed successfully!\")\n    except Exception as e:\n        print(f\"❌ Migration failed: {e}\")\n        sys.exit(1)\n