from flask import Blueprint, jsonify, request
import sys
import os
import json
import shutil
import subprocess
import uuid
import threading
import time
from datetime import datetime
import logging

# Set up logging
logger = logging.getLogger(__name__)

# Add the parent directory to the Python path to import aphrodite_helpers
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..')))

try:
    from aphrodite_helpers.check_jellyfin_connection import (
        load_settings,
        get_jellyfin_libraries
    )
    from app.api.jellyfin_helpers import get_library_items_with_posters
    from app.services.job import JobService
    from aphrodite_helpers.metadata_tagger import MetadataTagger, get_tagging_settings
    logger.info("Successfully imported dependencies for poster_manager")
except ImportError as e:
    logger.error(f"Import error in poster_manager: {e}")
    raise

bp = Blueprint('poster_manager', __name__, url_prefix='/api/poster-manager')
logger.info("Poster manager blueprint created")

# Test route to verify the blueprint is working
@bp.route('/test', methods=['GET'])
def test_poster_manager():
    """Test route to verify poster manager API is working"""
    return jsonify({
        'success': True,
        'message': 'Poster Manager API is working',
        'blueprint': 'poster_manager'
    })

@bp.route('/test-services', methods=['GET'])
def test_services():
    """Test route to verify services can be imported"""
    results = {
        'external_poster_service': False,
        'poster_replacement_service': False,
        'errors': []
    }
    
    # Test ExternalPosterService
    try:
        from app.services.external_poster_service import ExternalPosterService
        service = ExternalPosterService()
        results['external_poster_service'] = True
        logger.info("Successfully imported and created ExternalPosterService")
    except Exception as e:
        error_msg = f"ExternalPosterService error: {str(e)}"
        results['errors'].append(error_msg)
        logger.error(error_msg)
    
    # Test PosterReplacementService
    try:
        from app.services.poster_replacement_service import PosterReplacementService
        service = PosterReplacementService()
        results['poster_replacement_service'] = True
        logger.info("Successfully imported and created PosterReplacementService")
    except Exception as e:
        error_msg = f"PosterReplacementService error: {str(e)}"
        results['errors'].append(error_msg)
        logger.error(error_msg)
    
    return jsonify({
        'success': len(results['errors']) == 0,
        'results': results
    })

@bp.route('/library/<library_id>', methods=['GET'])
def get_library_posters(library_id):
    """Get all items with poster information for a specific library"""
    try:
        # Load Jellyfin settings
        settings = load_settings()
        if not settings:
            return jsonify({
                'success': False,
                'message': 'Failed to load settings'
            }), 500
        
        # Get Jellyfin connection details
        jf = settings["api_keys"]["Jellyfin"][0]
        url, api_key, user_id = jf["url"], jf["api_key"], jf["user_id"]
        
        # Get search query parameters
        search_query = request.args.get('search', '').lower()
        media_type = request.args.get('type', '')  # 'movie', 'series', etc.
        badge_status = request.args.get('badges', '')  # 'badged', 'original'
        
        # Get library items with poster information
        items = get_library_items_with_posters(url, api_key, user_id, library_id)
        
        # Apply filters
        filtered_items = []
        for item in items:
            # Search filter
            if search_query and search_query not in item['name'].lower():
                continue
                
            # Media type filter
            if media_type and item.get('type', '').lower() != media_type.lower():
                continue
                
            # Badge status filter (using aphrodite-overlay metadata tag)
            if badge_status:
                has_badges = item.get('has_badges', False)
                if badge_status == 'badged' and not has_badges:
                    continue
                elif badge_status == 'original' and has_badges:
                    continue
            
            # Add poster status information
            item['poster_status'] = {
                'has_original': item.get('has_original_poster', False),
                'has_badges': item.get('has_badges', False),
                'has_modified': item.get('has_badges', False),  # Frontend compatibility
                'current_source': 'badged' if item.get('has_badges', False) else 'original'
            }
            filtered_items.append(item)
        
        return jsonify({
            'success': True,
            'items': filtered_items,
            'total': len(filtered_items)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Error fetching library posters: {str(e)}'
        }), 500

@bp.route('/item/<item_id>/details', methods=['GET'])
def get_item_details(item_id):
    """Get detailed information about a specific item's poster"""
    try:
        # Load settings to get paths
        settings = load_settings()
        if not settings:
            return jsonify({
                'success': False,
                'message': 'Failed to load settings'
            }), 500
        
        # Get Jellyfin connection details
        jf = settings["api_keys"]["Jellyfin"][0]
        url, api_key, user_id = jf["url"], jf["api_key"], jf["user_id"]
        
        # Get item information from Jellyfin (with metadata tags)
        item_info = get_jellyfin_item_details(url, api_key, user_id, item_id)
        
        # Get poster file information
        poster_status = get_enhanced_poster_status(item_id, item_info.get('tags', []))
        
        # Get badge history if available
        badge_history = get_badge_history(item_id)
        
        return jsonify({
            'success': True,
            'item': item_info,
            'poster_status': poster_status,
            'badge_history': badge_history
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Error fetching item details: {str(e)}'
        }), 500

@bp.route('/item/<item_id>/revert', methods=['POST'])
def revert_item_to_original(item_id):
    """Revert a single item's poster to its original state"""
    try:
        # Load settings
        settings = load_settings()
        if not settings:
            return jsonify({
                'success': False,
                'message': 'Failed to load settings'
            }), 500
        
        # Get Jellyfin connection details
        jf = settings["api_keys"]["Jellyfin"][0]
        url, api_key, user_id = jf["url"], jf["api_key"], jf["user_id"]
        
        # Get item information
        item_info = get_jellyfin_item_details(url, api_key, user_id, item_id)
        poster_status = get_enhanced_poster_status(item_id, item_info.get('tags', []))
        
        # Check if revert is possible
        if not poster_status.get('can_revert', False):
            return jsonify({
                'success': False,
                'message': 'Cannot revert: item has no badges or original poster not found'
            }), 400
        
        # Generate job ID
        job_id = str(uuid.uuid4())
        
        # Create job record
        job_details = {
            'id': job_id,
            'type': 'revert',
            'command': f'revert_item_{item_id}',
            'options': {'item_id': item_id},
            'status': 'queued',
            'start_time': time.time(),
            'end_time': None,
            'result': None
        }
        
        JobService.create_job(job_details)
        
        # Define function to run revert
        def run_revert():
            try:
                # Determine base directory (Docker-aware)
                is_docker = (
                    os.path.exists('/app') and 
                    os.path.exists('/app/settings.yaml') and 
                    os.path.exists('/.dockerenv')
                )
                
                if is_docker:
                    base_dir = '/app'
                else:
                    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..'))
                
                # Find original poster with multiple extensions
                original_path = None
                for ext in ['.jpg', '.jpeg', '.png', '.webp']:
                    test_path = os.path.join(base_dir, 'posters', 'original', f"{item_id}{ext}")
                    if os.path.exists(test_path):
                        original_path = test_path
                        break
                
                if not original_path:
                    raise Exception('Original poster not found')
                
                # Find modified poster to delete
                modified_path = None
                for ext in ['.jpg', '.jpeg', '.png', '.webp']:
                    test_path = os.path.join(base_dir, 'posters', 'modified', f"{item_id}{ext}")
                    if os.path.exists(test_path):
                        modified_path = test_path
                        break
                
                # Remove modified poster if it exists
                if modified_path and os.path.exists(modified_path):
                    logger.info(f"Removing modified poster: {modified_path}")
                    os.remove(modified_path)
                    logger.info(f"Successfully removed modified poster")
                else:
                    logger.warning(f"Modified poster not found or path is None: {modified_path}")
                
                # Upload original poster back to Jellyfin
                try:
                    from aphrodite_helpers.poster_uploader import PosterUploader
                    logger.info(f"Uploading original poster back to Jellyfin: {original_path}")
                    uploader = PosterUploader(url, api_key, user_id)
                    upload_success = uploader.upload_poster(item_id, original_path, max_retries=3)
                    logger.info(f"Original poster upload result: {upload_success}")
                except Exception as upload_error:
                    logger.error(f"Failed to upload original poster: {upload_error}")
                    upload_success = False
                
                # Remove metadata tag
                tagging_settings = get_tagging_settings()
                tag_name = tagging_settings.get('tag_name', 'aphrodite-overlay')
                logger.info(f"Attempting to remove metadata tag: {tag_name}")
                tagger = MetadataTagger(url, api_key, user_id)
                tag_removed = tagger.remove_aphrodite_tag(item_id, tag_name)
                logger.info(f"Tag removal result: {tag_removed}")
                
                # Update job status
                result = {
                    'success': True,
                    'message': 'Successfully reverted to original poster',
                    'item_id': item_id,
                    'tag_removed': tag_removed,
                    'poster_uploaded': upload_success
                }
                
                JobService.update_job(job_id, {
                    'status': 'success',
                    'end_time': time.time(),
                    'result': result
                })
                
                logger.info(f"Successfully reverted item {item_id} to original poster")
                
            except Exception as e:
                logger.error(f"Error reverting item {item_id}: {str(e)}")
                JobService.update_job(job_id, {
                    'status': 'failed',
                    'end_time': time.time(),
                    'result': {
                        'success': False,
                        'error': str(e),
                        'item_id': item_id
                    }
                })
        
        # Start revert in background thread
        thread = threading.Thread(target=run_revert)
        thread.daemon = True
        thread.start()
        
        return jsonify({
            'success': True,
            'message': f'Revert process started for item {item_id}',
            'jobId': job_id
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Error starting revert process: {str(e)}'
        }), 500

@bp.route('/item/<item_id>/poster-sources', methods=['GET'])
def get_external_poster_sources(item_id):
    """Get poster options from external sources (TMDB, OMDB)"""
    try:
        # Test import first
        logger.info(f"Testing import of ExternalPosterService...")
        from app.services.external_poster_service import ExternalPosterService
        logger.info(f"Successfully imported ExternalPosterService")
        
        # Create service instance
        logger.info(f"Creating ExternalPosterService instance...")
        poster_service = ExternalPosterService()
        logger.info(f"Successfully created ExternalPosterService instance")
        
        # Get poster sources
        logger.info(f"Getting poster sources for item {item_id}...")
        poster_sources = poster_service.get_poster_sources(item_id)
        logger.info(f"Successfully got {len(poster_sources)} poster sources")
        
        return jsonify({
            'success': True,
            'sources': poster_sources,
            'total': len(poster_sources)
        })
        
    except ImportError as e:
        logger.error(f"Import error in get_external_poster_sources: {e}")
        return jsonify({
            'success': False,
            'message': f'Import error: {str(e)}',
            'error_type': 'ImportError'
        }), 500
    except Exception as e:
        logger.error(f"General error in get_external_poster_sources: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({
            'success': False,
            'message': f'Error fetching poster sources: {str(e)}',
            'error_type': type(e).__name__
        }), 500

@bp.route('/item/<item_id>/replace-poster', methods=['POST'])
def replace_with_external_poster(item_id):
    """Replace current poster with external source"""
    try:
        logger.info(f"Starting poster replacement for item {item_id}")
        
        # Test import first
        logger.info("Testing import of PosterReplacementService...")
        from app.services.poster_replacement_service import PosterReplacementService
        logger.info("Successfully imported PosterReplacementService")
        
        # Get request data
        data = request.get_json() or {}
        poster_data = data.get('poster_data')
        selected_badges = data.get('badges', [])
        
        logger.info(f"Request data - poster_data: {bool(poster_data)}, badges: {selected_badges}")
        
        if not poster_data:
            return jsonify({
                'success': False,
                'message': 'Poster data is required'
            }), 400
        
        # Create service instance
        logger.info("Creating PosterReplacementService instance...")
        replacement_service = PosterReplacementService()
        logger.info("Successfully created PosterReplacementService instance")
        
        # Validate poster data
        logger.info("Validating poster data...")
        if not replacement_service.validate_poster_data(poster_data):
            return jsonify({
                'success': False,
                'message': 'Invalid poster data provided'
            }), 400
        
        # Start replacement process
        logger.info("Starting replacement process...")
        job_id = replacement_service.replace_poster_async(
            item_id, 
            poster_data, 
            selected_badges
        )
        logger.info(f"Replacement process started with job ID: {job_id}")
        
        poster_source = poster_data.get('source', 'External')
        badge_list = ', '.join(selected_badges) if selected_badges else 'none'
        
        return jsonify({
            'success': True,
            'message': f'Poster replacement started from {poster_source} with badges: {badge_list}',
            'jobId': job_id
        })
        
    except ImportError as e:
        logger.error(f"Import error in replace_with_external_poster: {e}")
        return jsonify({
            'success': False,
            'message': f'Import error: {str(e)}',
            'error_type': 'ImportError'
        }), 500
    except Exception as e:
        logger.error(f"General error in replace_with_external_poster: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({
            'success': False,
            'message': f'Error starting poster replacement: {str(e)}',
            'error_type': type(e).__name__
        }), 500

@bp.route('/item/<item_id>/upload-custom', methods=['POST'])
def upload_custom_poster(item_id):
    """Upload a custom poster for an item"""
    try:
        logger.info(f"Starting custom poster upload for item {item_id}")
        
        # Check if file is present
        if 'poster' not in request.files:
            return jsonify({
                'success': False,
                'message': 'No poster file provided'
            }), 400
        
        file = request.files['poster']
        if file.filename == '':
            return jsonify({
                'success': False,
                'message': 'No file selected'
            }), 400
        
        # Check file type
        allowed_extensions = {'.jpg', '.jpeg', '.png', '.webp', '.gif'}
        file_ext = os.path.splitext(file.filename)[1].lower()
        if file_ext not in allowed_extensions:
            return jsonify({
                'success': False,
                'message': f'Invalid file type. Allowed: {", ".join(allowed_extensions)}'
            }), 400
        
        # Always set apply_badges to false for custom uploads
        # Users can apply badges separately using the "Apply Badges" button
        apply_badges = False
        
        logger.info(f"File: {file.filename}, Apply badges: {apply_badges} (always false for custom uploads)")
        
        # Import and create service
        from app.services.custom_poster_service import CustomPosterService
        poster_service = CustomPosterService()
        
        # Read file data
        file_data = file.read()
        
        # Start upload process
        job_id = poster_service.upload_custom_poster_async(
            item_id, 
            file_data, 
            apply_badges
        )
        
        return jsonify({
            'success': True,
            'message': f'Custom poster upload started (no badges applied)',
            'jobId': job_id
        })
        
    except Exception as e:
        logger.error(f"Error in upload_custom_poster: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({
            'success': False,
            'message': f'Error uploading custom poster: {str(e)}'
        }), 500

            if success:
                logger.info(f"Successfully processed bulk job {job_id} for item {item_id}")
            else:
                logger.error(f"Failed to process bulk job {job_id} for item {item_id}: {stderr}")
            
        except Exception as e:
            logger.error(f"Error processing bulk job {job_id}: {str(e)}")
            JobService.update_job(job_id, {
                'status': 'failed',
                'end_time': time.time(),
                'result': {
                    'success': False,
                    'error': str(e),
                    'item_id': item_id
                }
            })
    
    # Start job in background thread
    thread = threading.Thread(target=run_job)
    thread.daemon = True
    thread.start()
def reprocess_item_badges(item_id):
    """Re-apply badges to a single item (only if it doesn't already have badges)"""
    try:
        # Load settings
        settings = load_settings()
        if not settings:
            return jsonify({
                'success': False,
                'message': 'Failed to load settings'
            }), 500
        
        # Get Jellyfin connection details
        jf = settings["api_keys"]["Jellyfin"][0]
        url, api_key, user_id = jf["url"], jf["api_key"], jf["user_id"]
        
        # Get request data for badge selection
        data = request.get_json() or {}
        selected_badges = data.get('badges', ['audio', 'resolution', 'review', 'awards'])  # Default to all
        
        # Validate badge types
        valid_badges = ['audio', 'resolution', 'review', 'awards']
        selected_badges = [badge for badge in selected_badges if badge in valid_badges]
        
        if not selected_badges:
            return jsonify({
                'success': False,
                'message': 'At least one badge type must be selected'
            }), 400
        
        # Get item information
        item_info = get_jellyfin_item_details(url, api_key, user_id, item_id)
        poster_status = get_enhanced_poster_status(item_id, item_info.get('tags', []))
        
        # Check if item already has badges (only allow reprocessing of original items)
        if poster_status.get('has_badges', False):
            return jsonify({
                'success': False,
                'message': 'Item already has badges. Use revert first if you want to re-apply badges.'
            }), 400
        
        # Generate job ID
        job_id = str(uuid.uuid4())
        
        # Create job record
        job_details = {
            'id': job_id,
            'type': 'reprocess',
            'command': f'python aphrodite.py item {item_id}',
            'options': {'item_id': item_id, 'badges': selected_badges},
            'status': 'queued',
            'start_time': time.time(),
            'end_time': None,
            'result': None
        }
        
        JobService.create_job(job_details)
        
        # Define function to run reprocessing
        def run_reprocess():
            try:
                # Determine base directory (Docker-aware)
                is_docker = (
                    os.path.exists('/app') and 
                    os.path.exists('/app/settings.yaml') and 
                    os.path.exists('/.dockerenv')
                )
                
                if is_docker:
                    working_dir = '/app'
                    cmd = ['python', '/app/aphrodite.py', 'item', item_id]
                else:
                    working_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..'))
                    cmd = ['python', os.path.join(working_dir, 'aphrodite.py'), 'item', item_id]
                
                # Add badge type flags based on selection
                all_badge_types = ['audio', 'resolution', 'review', 'awards']
                for badge_type in all_badge_types:
                    if badge_type not in selected_badges:
                        cmd.append(f'--no-{badge_type}')
                
                # Run the aphrodite.py command with debug output
                logger.info(f"Executing command: {' '.join(cmd)}")
                process = subprocess.Popen(
                    cmd,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd=working_dir
                )
                
                stdout, stderr = process.communicate()
                
                # Log the output for debugging
                logger.info(f"Command stdout: {stdout}")
                if stderr:
                    logger.warning(f"Command stderr: {stderr}")
                
                # Update job status
                success = process.returncode == 0
                status = 'success' if success else 'failed'
                
                badge_list = ', '.join(selected_badges)
                result = {
                    'success': success,
                    'message': f'Badges ({badge_list}) successfully applied' if success else 'Failed to apply badges',
                    'item_id': item_id,
                    'badges_applied': selected_badges,
                    'stdout': stdout,
                    'stderr': stderr,
                    'returncode': process.returncode
                }
                
                JobService.update_job(job_id, {
                    'status': status,
                    'end_time': time.time(),
                    'result': result
                })
                
                if success:
                    logger.info(f"Successfully reprocessed item {item_id} with badges: {badge_list}")
                else:
                    logger.error(f"Failed to reprocess item {item_id}: {stderr}")
                
            except Exception as e:
                logger.error(f"Error reprocessing item {item_id}: {str(e)}")
                JobService.update_job(job_id, {
                    'status': 'failed',
                    'end_time': time.time(),
                    'result': {
                        'success': False,
                        'error': str(e),
                        'item_id': item_id
                    }
                })
        
        # Start reprocessing in background thread
        thread = threading.Thread(target=run_reprocess)
        thread.daemon = True
        thread.start()
        
        badge_list = ', '.join(selected_badges)
        return jsonify({
            'success': True,
            'message': f'Reprocessing started for item {item_id} with badges: {badge_list}',
            'jobId': job_id
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'Error starting reprocess: {str(e)}'
        }), 500

def get_jellyfin_item_details(url, api_key, user_id, item_id):
    """Get detailed item information from Jellyfin"""
    import requests
    
    item_url = f"{url}/Users/{user_id}/Items/{item_id}"
    params = {
        'Fields': 'PrimaryImageAspectRatio,ImageTags,Overview,ProductionYear,Genres,Tags',
        'api_key': api_key
    }
    
    response = requests.get(item_url, params=params)
    response.raise_for_status()
    
    item = response.json()
    poster_url = None
    if item.get('ImageTags', {}).get('Primary'):
        poster_url = f"{url}/Items/{item['Id']}/Images/Primary?api_key={api_key}"
    
    return {
        'id': item['Id'],
        'name': item['Name'],
        'type': item['Type'],
        'poster_url': poster_url,
        'year': item.get('ProductionYear'),
        'overview': item.get('Overview', ''),
        'genres': item.get('Genres', []),
        'tags': item.get('Tags', [])
    }

def get_enhanced_poster_status(item_id, tags):
    """Get poster status based on metadata tags and file existence"""
    # Check if item has aphrodite-overlay metadata tag
    has_badges = 'aphrodite-overlay' in tags
    
    # Determine the base directory
    is_docker = (
        os.path.exists('/app') and 
        os.path.exists('/app/settings.yaml') and 
        os.path.exists('/.dockerenv')
    )
    
    if is_docker:
        base_dir = '/app'
    else:
        base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../..'))
    
    # Check for original poster with multiple extensions
    original_path = None
    has_original = False
    for ext in ['.jpg', '.jpeg', '.png', '.webp']:
        test_path = os.path.join(base_dir, 'posters', 'original', f"{item_id}{ext}")
        if os.path.exists(test_path):
            original_path = test_path
            has_original = True
            break
    
    # Check for modified poster with multiple extensions
    modified_path = None
    has_modified = False
    for ext in ['.jpg', '.jpeg', '.png', '.webp']:
        test_path = os.path.join(base_dir, 'posters', 'modified', f"{item_id}{ext}")
        if os.path.exists(test_path):
            modified_path = test_path
            has_modified = True
            break
    
    status = {
        'has_original': has_original,
        'has_modified': has_badges,  # Frontend compatibility - use metadata tag instead of file existence
        'has_badges': has_badges,  # Based on metadata tag
        'current_source': 'badged' if has_badges else 'original',
        'can_revert': has_original and has_badges  # Only allow revert if original exists and has badges
    }
    
    # Get file timestamps if they exist
    if status['has_original'] and original_path:
        status['original_modified'] = datetime.fromtimestamp(
            os.path.getmtime(original_path)
        ).isoformat()
    
    if status['has_modified'] and modified_path:
        status['modified_created'] = datetime.fromtimestamp(
            os.path.getmtime(modified_path)
        ).isoformat()
    
    return status

def get_poster_status(item_id):
    """Legacy function - kept for backward compatibility"""
    # This function is kept for any legacy code that might still call it
    # New code should use get_enhanced_poster_status instead
    return get_enhanced_poster_status(item_id, [])

def get_badge_history(item_id):
    """Get badge application history for an item"""
    # This is a placeholder for future badge history tracking
    # For now, return basic information
    return {
        'last_processed': None,
        'badges_applied': [],
        'processing_count': 0
    }
